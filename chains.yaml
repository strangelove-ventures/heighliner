# Acrechain
- name: acrechain
  github-organization: ArableProtocol
  github-repo: acrechain
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/acred
  build-env:
    - LEDGER_ENABLED=false

# Agoric-sdk
- name: agoric
  dockerfile: cargo
  github-organization: Agoric
  github-repo: agoric-sdk
  build-env:
    - LEDGER_ENABLED=false
  build-target: |
    apt update && apt install -y python3 g++

    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
    export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
    nvm install 18
    npm i -g yarn

    set -eux
    cd golang/cosmos
    export CGO_ENABLED=1 GOOS=linux GOARCH=${TARGETARCH} CC=${ARCH}-linux-gnu-gcc CXX=${ARCH}-linux-gnu-g++
    COMMIT=$(git log -1 --format='%H')
    COMMON_LDFLAGS="-X github.com/cosmos/cosmos-sdk/version.Name=agoric \
      -X github.com/cosmos/cosmos-sdk/version.AppName=agd \
      -X github.com/cosmos/cosmos-sdk/version.Version=$VERSION \
      -X "github.com/cosmos/cosmos-sdk/version.BuildTags=$BUILD_TAGS" \
      -X github.com/cosmos/cosmos-sdk/version.Commit=$COMMIT"

    # Build daemon lib
    go build -v -mod=readonly -tags "$BUILD_TAGS" -ldflags "$COMMON_LDFLAGS" -buildmode=c-shared -o build/libagcosmosdaemon.so ./cmd/libdaemon/main.go

    # Build helper
    LDFLAGS_HELPER="$COMMON_LDFLAGS -X github.com/cosmos/cosmos-sdk/version.AppName=ag-cosmos-helper"
    go build -v -mod=readonly -tags "$BUILD_TAGS" -ldflags "$LDFLAGS_HELPER" -o ../../bin/ag-cosmos-helper ./cmd/helper

    # Build agd
    go build -v -mod=readonly -tags "$BUILD_TAGS" -ldflags "$COMMON_LDFLAGS" -o ../../bin/agd ./cmd/agd

    # Build nodejs swingset kernel
    npm install node-addon-api --legacy-peer-deps
    export CC_host=gcc CXX_host=g++
    GYP_DEBUG="--arch=${TARGETARCH}" make node-compile-gyp
    # cp binding.gyp.in binding.gyp
    # /root/.nvm/versions/node/*/lib/node_modules/npm/bin/node-gyp-bin/node-gyp configure build --arch=${TARGETARCH}
    cd ../../packages
    rm -rf ui-components web-components wallet-connection wallet web-components
    cd ..
    npm_config_arch=${TARGETARCH} yarn
    npm_config_arch=${TARGETARCH} yarn build

    # Move to final location
    mkdir /agoric-sdk
    mv packages node_modules bin golang /agoric-sdk
  directories:
    - /agoric-sdk
    - /root/.nvm/versions/node
  libraries:
    - /agoric-sdk/golang/cosmos/build/libagcosmosdaemon.so
  target-libraries:
    - /lib/${ARCH}-linux-gnu/libdl.so.2
    - /lib/${ARCH}-linux-gnu/libm.so.6
    - /usr/lib/${ARCH}-linux-gnu/libstdc++.so.6
    - /usr/lib/gcc/${ARCH}-linux-gnu/10/libgcc_s.so
    - /lib/${ARCH}-linux-gnu/libgcc_s.so.1
  final-image: |
    set -eux
    ln -s /agoric-sdk/bin/agd /bin/agd
    ln -s /agoric-sdk/bin/ag-cosmos-helper /bin/ag-cosmos-helper
    ln -s /agoric-sdk/packages/cosmic-swingset/bin/ag-chain-cosmos /bin/ag-chain-cosmos
    ln -s /agoric-sdk/packages/cosmic-swingset/bin/ag-nchainz /bin/ag-nchainz
    mkdir -p /go/src/github.com/strangelove-ventures/agoric-sdk/golang/cosmos/build /build/agoric-sdk/golang/cosmos/build
    mv /agoric-sdk/golang/cosmos/build/libagcosmosdaemon.so /go/src/github.com/strangelove-ventures/agoric-sdk/golang/cosmos/build/
    ln -s  /go/src/github.com/strangelove-ventures/agoric-sdk/golang/cosmos/build/libagcosmosdaemon.so /build/agoric-sdk/golang/cosmos/build/libagcosmosdaemon.so
    ln -s /root/.nvm/versions/node/*/bin/node /bin/node

# Akash
- name: akash
  github-organization: akash-network
  github-repo: node
  dockerfile: cosmos
  build-target: |
    apk add --update nodejs npm jq direnv
    direnv allow
    eval $(direnv export bash)
    export GOVERSION=$(./script/tools.sh gotoolchain | sed 's/go*//')
    make install
  binaries:
    - /go/bin/akash

# Andromeda
- name: andromeda
  github-organization: andromedaprotocol
  github-repo: andromedad
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/andromedad
  build-env:
    - BUILD_TAGS=muslc

# Archway
- name: archway
  github-organization: archway-network
  github-repo: archway
  dockerfile: cosmos
  build-target: make build
  binaries:
    - build/archwayd
  build-env:
    - BUILD_TAGS=muslc

# Arkeo
- name: arkeo
  github-organization: arkeonetwork
  github-repo: arkeo
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/arkeod
  build-env:
    - CGO_ENABLED=0
  pre-build: |
    apk --no-cache add findutils curl protoc && \
    rm -rf /var/cache/apk/*
    BIN="/usr/local/bin" && \
    VERSION="1.20.0" && \
    curl -sSL \
    "https://github.com/bufbuild/buf/releases/download/v${VERSION}/buf-$(uname -s)-$(uname -m)" \
    -o "${BIN}/buf" && \
    chmod +x "${BIN}/buf"
    make protob

# Assetmantle
- name: assetmantle
  github-organization: assetmantle
  github-repo: node
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/mantleNode
  build-env:
    - LEDGER_ENABLED=false

# Avalanche
- name: avalanche
  github-organization: ava-labs
  github-repo: avalanchego
  dockerfile: avalanche
  pre-build: |
    startTime="$(sed -n 's|.*"startTime":\([^"]*\),.*|\1|p' genesis/genesis_local.json)"
    nowTime="$(date +%s)"
    if [ $nowTime -gt $startTime ]; then
      sed "s/$startTime/$nowTime/g" genesis/genesis_local.json > genesis/genesis_local_tmp.json
      mv genesis/genesis_local_tmp.json genesis/genesis_local.json
    fi
  build-target: |
    set -eux
    # Build AvalancheGo
    bash scripts/build.sh
    # Build SubnetEVM
    git clone -b v0.5.9-ibc-v0.1.0 --single-branch https://github.com/ConsiderItDone/subnet-evm.git
    cd subnet-evm
    bash scripts/build.sh
  binaries:
    - build/avalanchego
    - /go/src/github.com/ava-labs/avalanchego/build/plugins/srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy

# Axelar
# Requires "--alpine-version 3.18" set as a flag to the build command
- name: axelar
  github-organization: axelarnetwork
  github-repo: axelar-core
  dockerfile: cosmos
  binaries:
    - bin/axelard
  build-target: |
    set -eux
    apk add --update nodejs npm jq py3-pip
    CONTRACT_VERSION=$(cat contract-version.json | jq -r '.gateway')
    git clone -b ${CONTRACT_VERSION} --single-branch https://github.com/axelarnetwork/axelar-cgp-solidity.git
    cd axelar-cgp-solidity
    # The npm commands will complain about nodejs versions but will proceed.
    # See issue: https://github.com/strangelove-ventures/heighliner/issues/92
    npm ci
    npm run build
    # prettier + alpine + certain versions of the flatten-contracts scripts fail during prettier write, which is not fully necessary since hardhat flatten still outputs artifacts
    sed -i '/prettier/d' scripts/flatten-contracts.sh
    npm run flatten
    mkdir -p ../contract-artifacts/gateway
    mv artifacts/* ../contract-artifacts/
    cd ..
    VERSION=$(echo $(git describe --tags) | sed 's/^v//')
    COMMIT=$(git log -1 --format='%H')
    BUILD_TAGS=muslc
    LDFLAGS="$LDFLAGS -X github.com/cosmos/cosmos-sdk/version.Name=axelar \
      -X github.com/cosmos/cosmos-sdk/version.AppName=axelard \
      -X github.com/cosmos/cosmos-sdk/version.Version=$VERSION \
      -X "github.com/cosmos/cosmos-sdk/version.BuildTags=$BUILD_TAGS" \
      -X github.com/cosmos/cosmos-sdk/version.Commit=$COMMIT \
      -X github.com/CosmWasm/wasmd/x/wasm/types/MaxWasmSize=3145728 \
      -X github.com/axelarnetwork/axelar-core/x/axelarnet/exported.NativeAsset=uaxl \
      -X github.com/axelarnetwork/axelar-core/app.WasmEnabled=true \
      -X github.com/axelarnetwork/axelar-core/app.IBCWasmHooksEnabled=false \
      -X github.com/axelarnetwork/axelar-core/app.WasmCapabilities="iterator,staking,stargate,cosmwasm_1_3""
    go build -o ./bin/axelard -mod=readonly -tags "$BUILD_TAGS" -ldflags "$LDFLAGS" ./cmd/axelard
  platforms:
    - linux/amd64

# Axelar tofnd
- name: tofnd
  github-organization: axelarnetwork
  github-repo: tofnd
  dockerfile: cargo
  build-target: cargo build --release
  pre-build:
    apt install -y libgmp3-dev:${TARGETARCH}
  binaries:
    - /build/tofnd/target/${ARCH}-unknown-linux-gnu/release/tofnd

# Basilisk
- name: basilisk
  github-organization: galacticcouncil
  github-repo: Basilisk-node
  dockerfile: cargo
  build-target: cargo build --release -Zbuild-std
  pre-build: |
    apt install -y zlib1g-dev:${TARGETARCH}
    TOOLCHAIN=$(cat rust-toolchain | grep channel | awk '{print $3}' | tr -d '"')
    rustup component add rust-src --toolchain ${TOOLCHAIN}-$(uname -m)-unknown-linux-gnu
    ./scripts/init.sh
  binaries:
    - /build/Basilisk-node/target/${ARCH}-unknown-linux-gnu/release/basilisk

#BeraChain
- name: berachain
  dockerfile: none
  pre-build: |
    apt update -y
    apt install -y wget libstdc++6
    curl -o berad 'https://testnet-genesis.s3.ca-central-1.amazonaws.com/berad-linux-amd64-v0.2.3-alpha-rc7
    chmod +x berad
    mv berad /usr/bin
    chmod 555 /usr/bin/berad
  binaries:
    - /usr/bin/berad
  platforms:
    - linux/amd64

# Bitcanna
- name: bitcanna
  github-organization: BitCannaGlobal
  github-repo: bcna
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/bcnad

# BitSong
- name: bitsong
  github-organization: bitsongofficial
  github-repo: go-bitsong
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/bitsongd

# Bostrom
- name: bostrom
  github-organization: cybercongress
  github-repo: go-cyber
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/cyber
  build-env:
    - BUILD_TAGS=muslc

# Notional Labs Composable
- name: composable-cosmos
  github-organization: notional-labs
  github-repo: composable-centauri
  dockerfile: cosmos
  build-env:
    - BUILD_TAGS=muslc
  build-target: make build
  binaries:
    - /go/src/github.com/notional-labs/composable-centauri/bin/centaurid


# Canto
- name: canto
  github-organization: Canto-Network
  github-repo: Canto
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/cantod
  build-env:
    - BUILD_TAGS=muslc

# Carbon
- name: carbon
  github-organization: Switcheo
  github-repo: carbon-bootstrap
  dockerfile: cargo
  build-target: |
    apt update && apt install wget build-essential jq cmake sudo -y
    wget https://github.com/google/leveldb/archive/1.23.tar.gz && \
      tar -zxvf 1.23.tar.gz && \
      wget https://github.com/google/googletest/archive/release-1.11.0.tar.gz && \
      tar -zxvf release-1.11.0.tar.gz && \
      mv googletest-release-1.11.0/* leveldb-1.23/third_party/googletest && \
      wget https://github.com/google/benchmark/archive/v1.5.5.tar.gz && \
      tar -zxvf v1.5.5.tar.gz && \
      mv benchmark-1.5.5/* leveldb-1.23/third_party/benchmark && \
      cd leveldb-1.23 && \
      mkdir -p build && \
      cd build && \
      cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON .. && \
      cmake --build . && \
      sudo cp -P libleveldb.so* /usr/local/lib/ && \
      sudo ldconfig && \
      cd .. && \
      sudo cp -r include/leveldb /usr/local/include/ && \
      cd .. && \
    NETWORK=mainnet
    VERSION_NUM=$(echo ${VERSION} | cut -c 2-)
    wget https://github.com/Switcheo/carbon-bootstrap/releases/download/"${VERSION}"/carbond"${VERSION_NUM}"-${NETWORK}.linux-$(dpkg --print-architecture).tar.gz
    tar -xvf carbond${VERSION_NUM}-${NETWORK}.linux-$(dpkg --print-architecture).tar.gz
    sudo mv carbond /usr/local/bin
  libraries:
    - /usr/local/lib/libleveldb.so.*
  binaries:
    - /usr/local/bin/carbond

# Celestia App
- name: celestia
  github-organization: celestiaorg
  github-repo: celestia-app
  dockerfile: cosmos
  build-target: |
    VERSION := $(shell echo $(shell git describe --tags 2>/dev/null || git log -1 --format='%h') | sed 's/^v//')
    COMMIT=$(git log -1 --format='%H')
    LDFLAGS="$LDFLAGS -X github.com/cosmos/cosmos-sdk/version.Name=celestia-app -X github.com/cosmos/cosmos-sdk/version.AppName=celestia-appd -X github.com/cosmos/cosmos-sdk/version.Version=$VERSION -X github.com/cosmos/cosmos-sdk/version.Commit=$COMMIT"
    go install -ldflags="$LDFLAGS" ./cmd/celestia-appd
  binaries:
    - /go/bin/celestia-appd

# Celestia Node
- name: celestia-node
  github-organization: celestiaorg
  github-repo: celestia-node
  dockerfile: cosmos
  build-target: |
    versioningPath="github.com/celestiaorg/celestia-node/nodebuilder/node"
    LDFLAGS="$LDFLAGS -X '${versioningPath}.buildTime=$(date)' -X '${versioningPath}.lastCommit=$(git rev-parse HEAD)' -X '${versioningPath}.semanticVersion=$(git describe --tags --dirty=-dev 2>/dev/null || git rev-parse --abbrev-ref HEAD)'"
    go install -ldflags="$LDFLAGS" ./cmd/celestia
  binaries:
    - /go/bin/celestia

# Cerberus
- name: cerberus
  github-organization: cerberus-zone
  github-repo: cerberus
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/cerberusd

# Cheqd
- name: cheqd
  github-organization: cheqd
  github-repo: cheqd-node
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/cheqd-noded

# Chihuahua
- name: chihuahua
  github-organization: ChihuahuaChain
  github-repo: chihuahua
  dockerfile: cosmos
  build-target: make install
  build-env:
    - BUILD_TAGS=muslc
  binaries:
    - /go/bin/chihuahuad

# Comdex
- name: comdex
  github-organization: comdex-official
  github-repo: comdex
  dockerfile: cosmos
  build-target: make install
  build-env:
    - BUILD_TAGS=muslc
  binaries:
    - /go/bin/comdex

# CometBFT
- name: cometbft
  github-organization: cometbft
  github-repo: cometbft
  dockerfile: cosmos
  build-target: make build
  binaries:
    - /go/src/github.com/cometbft/cometbft/build/cometbft

# Composable
- name: composable
  github-organization: ComposableFi
  github-repo: composable
  dockerfile: cargo
  build-target: |
    apt install -y zlib1g-dev:${TARGETARCH}
    TOOLCHAIN=$(cat rust-toolchain.toml | grep channel | awk '{print $3}' | tr -d '"')
    rustup component add rust-src --toolchain ${TOOLCHAIN}-$(uname -m)-unknown-linux-gnu
    rustup target add wasm32-unknown-unknown
    cd code
    cargo build --release -p wasm-optimizer
    cargo build --release -p composable-runtime-wasm --target wasm32-unknown-unknown
    cargo build --release -p picasso-runtime-wasm --target wasm32-unknown-unknown
    cargo build --release -p dali-runtime-wasm --target wasm32-unknown-unknown
    ./target/release/wasm-optimizer --input ./target/wasm32-unknown-unknown/release/dali_runtime.wasm --output ./target/wasm32-unknown-unknown/release/dali_runtime.optimized.wasm
    ./target/release/wasm-optimizer --input ./target/wasm32-unknown-unknown/release/picasso_runtime.wasm --output ./target/wasm32-unknown-unknown/release/picasso_runtime.optimized.wasm
    ./target/release/wasm-optimizer --input ./target/wasm32-unknown-unknown/release/composable_runtime.wasm --output ./target/wasm32-unknown-unknown/release/composable_runtime.optimized.wasm
    cargo build --release -p composable -Zbuild-std --features=builtin-wasm
  build-dir: code
  build-env:
    - DALI_RUNTIME=/build/composable/code/target/wasm32-unknown-unknown/release/dali_runtime.optimized.wasm
    - PICASSO_RUNTIME=/build/composable/code/target/wasm32-unknown-unknown/release/picasso_runtime.optimized.wasm
    - COMPOSABLE_RUNTIME=/build/composable/code/target/wasm32-unknown-unknown/release/composable_runtime.optimized.wasm
  binaries:
    - /build/composable/code/target/${ARCH}-unknown-linux-gnu/release/composable

# Cosmos Hub
- name: gaia
  github-organization: cosmos
  github-repo: gaia
  dockerfile: cosmos
  build-target: make install
  build-env:
    - LEDGER_ENABLED=false
    - BUILD_TAGS=muslc
  binaries:
    - /go/bin/gaiad

# Cosmos Hub ICS
- name: ics
  github-organization: cosmos
  github-repo: interchain-security
  dockerfile: cosmos
  build-target: |
    export GOFLAGS='-buildmode=pie'
    export CGO_CPPFLAGS="-D_FORTIFY_SOURCE=2"
    export CGO_LDFLAGS="-Wl,-z,relro,-z,now -fstack-protector"
    go install -ldflags="$LDFLAGS" ./cmd/interchain-security-pd
    go install -ldflags="$LDFLAGS" ./cmd/interchain-security-cd
  binaries:
    - /go/bin/interchain-security-pd
    - /go/bin/interchain-security-cd

# Crescent
- name: crescent
  github-organization: crescent-network
  github-repo: crescent
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/crescentd

# Cronos
- name: cronos
  github-organization: crypto-org-chain
  github-repo: cronos
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/cronosd

# Crypto.org
- name: cryptoorgchain
  github-organization: crypto-org-chain
  github-repo: chain-main
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/chain-maind

# Decentr
- name: decentr
  github-organization: Decentr-net
  github-repo: decentr
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/decentrd

# Desmos
- name: desmos
  github-organization: desmos-labs
  github-repo: desmos
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/desmos
  build-env:
    - BUILD_TAGS=muslc

# Dig
- name: dig
  github-organization: notional-labs
  github-repo: dig
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/digd
  build-env:
    - BUILD_TAGS=muslc

# Duality
- name: duality
  github-organization: duality-labs
  github-repo: duality
  dockerfile: cosmos
  build-target: make install
  build-env:
    - LEDGER_ENABLED=false
    - BUILD_TAGS=muslc
  binaries:
    - /go/bin/dualityd

  # Dymension
- name: dymension
  github-organization: dymensionxyz
  github-repo: dymension
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/dymd

# dydx
- name: dydx
  github-organization: dydxprotocol
  github-repo: v4-chain
  dockerfile: cosmos
  build-target: make install
  build-dir: protocol
  binaries:
    - /go/bin/dydxprotocold

# Emoney
- name: emoney
  github-organization: e-money
  github-repo: em-ledger
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/emd

# Ethos
- name: ethos
  github-organization: Ethos-Works
  github-repo: ethos-chain
  dockerfile: cosmos
  build-target: make install
  build-env:
    - BUILD_TAGS=muslc
  binaries:
    - /go/bin/ethosd

# Evmos
- name: evmos
  github-organization: tharsis
  github-repo: evmos
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/evmosd

# Fetchhub
- name: fetchhub
  github-organization: fetchai
  github-repo: fetchd
  dockerfile: cosmos
  build-target: make install
  build-env:
    - BUILD_TAGS=muslc
  binaries:
    - /go/bin/fetchd

# FirmaChain
- name: firmachain
  github-organization: FirmaChain
  github-repo: firmachain
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/firmachaind

# Gravity Bridge
- name: gravitybridge
  github-organization: Gravity-Bridge
  github-repo: Gravity-Bridge
  dockerfile: cosmos
  build-target: make build
  build-dir: module
  binaries:
    - module/build/gravity

# ibc-go sim (for testing)
- name: ibc-go-simd
  github-organization: cosmos
  github-repo: ibc-go
  dockerfile: cosmos
  build-target: make build
  binaries:
    - build/simd
  build-env:
    - BUILD_TAGS=muslc

# hyperlane agents
- name: hyperlane-agents
  github-organization: hyperlane-xyz
  github-repo: hyperlane-monorepo
  dockerfile: cargo
  build-dir: rust
  build-target: |
    sed -i '/channel/c\channel = "nightly"' ../rust-toolchain
    rustup toolchain install nightly
    rustup component add rust-src --toolchain nightly-$(uname -m)-unknown-linux-gnu
    cargo build --release --bin validator --bin relayer -Zbuild-std
  binaries:
    - /build/hyperlane-monorepo/rust/target/${ARCH}-unknown-linux-gnu/release/validator
    - /build/hyperlane-monorepo/rust/target/${ARCH}-unknown-linux-gnu/release/relayer

# hyperlane sim (for testing)
- name: hyperlane-simd
  github-organization: strangelove-ventures
  github-repo: hyperlane-cosmos
  dockerfile: cosmos
  build-target: make build
  binaries:
    - build/simd
  build-env:
    - BUILD_TAGS=muslc

# ImpactHub
- name: impacthub
  github-organization: ixofoundation
  github-repo: ixo-blockchain
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/ixod

# Injective
- name: injective
  pre-build: |
    apt update
    apt install unzip
    wget https://github.com/InjectiveLabs/injective-chain-releases/releases/download/$VERSION/linux-amd64.zip
    unzip linux-amd64.zip
    mv injectived peggo injective-exchange /usr/bin
    mv libwasmvm.x86_64.so /usr/lib
  binaries:
    - /usr/bin/injectived
    - /usr/bin/peggo
    - /usr/bin/injective-exchange
  libraries:
    - /usr/lib/libwasmvm.x86_64.so
  platforms:
    - linux/amd64

# Interchain accounts demo
- name: icad
  github-organization: cosmos
  github-repo: interchain-accounts-demo
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/icad

# Interchain queries demo
- name: icqd
  github-organization: quasar-finance
  github-repo: interchain-query-demo
  dockerfile: cosmos
  build-target: go build -ldflags "$LDFLAGS" -o build/icq ./cmd/interchain-query-demod
  binaries:
    - build/icq

# IRISnet
- name: irisnet
  github-organization: irisnet
  github-repo: irishub
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/iris

# Juno
- name: juno
  github-organization: CosmosContracts
  github-repo: juno
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/junod
  build-env:
    - LEDGER_ENABLED=false
    - BUILD_TAGS=muslc

# Kaon
- name: kaon
  github-organization: KYVENetwork
  github-repo: chain
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/kyved
  build-env:
    - ENV=kaon

# Kava
- name: kava
  github-organization: Kava-Labs
  github-repo: kava
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/kava

# Kichain
- name: kichain
  github-organization: KiFoundation
  github-repo: ki-tools
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/kid
  build-env:
    - BUILD_TAGS=muslc

# Konstellation
- name: konstellation
  github-organization: knstl
  github-repo: konstellation
  dockerfile: cosmos
  build-target: make install
  build-env:
    - BUILD_TAGS=muslc
  binaries:
    - /go/bin/knstld

# Kujira
- name: kujira
  github-organization: Team-Kujira
  github-repo: core
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/kujirad
  build-env:
    - LEDGER_ENABLED=false
    - BUILD_TAGS=muslc

# KYVE
- name: kyve
  github-organization: KYVENetwork
  github-repo: chain
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/kyved
  build-env:
    - ENV=mainnet

- name: lava
  github-organization: lavanet
  github-repo: lava
  dockerfile: cosmos
  build-target: make install-lavad
  binaries:
    - /go/bin/lavad

# Likecoin
- name: likecoin
  github-organization: likecoin
  github-repo: likecoin-chain
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/liked

# Lumnetwork
- name: lumnetwork
  github-organization: lum-network
  github-repo: chain
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/lumd

# Mars
- name: mars
  github-organization: mars-protocol
  github-repo: hub
  dockerfile: cosmos
  build-target: make install
  build-env:
    - BUILD_TAGS=muslc
  binaries:
    - /go/bin/marsd

# Mesh-security-sdk simd
- name: meshd
  github-organization: osmosis-labs
  github-repo: mesh-security-sdk
  dockerfile: cosmos
  build-target: make install
  build-dir: demo
  build-env:
    - BUILD_TAGS=muslc
  binaries:
    - /go/bin/meshd

# Migaloo
- name: migaloo
  github-organization: White-Whale-Defi-Platform
  github-repo: migaloo-chain
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/migalood

# Nomic
- name: nomic
  github-organization: nomic-io
  github-repo: nomic
  dockerfile: cargo
  build-target: |
    TOOLCHAIN=$(cat rust-toolchain.toml | grep channel | awk '{print $3}' | tr -d '"')
    rustup component add rust-src --toolchain ${TOOLCHAIN}-$(uname -m)-unknown-linux-gnu
    cargo install --locked --path . -Zbuild-std
  binaries:
    - /build/nomic/target/${ARCH}-unknown-linux-gnu/release/nomic
  # TODO remove platforms here so that both linux/amd64 and linux/arm64 are built
  # once these changes are merged: https://github.com/nomic-io/orga/pull/154
  platforms:
    - linux/amd64

# Noria
- name: noria
  github-organization: noria-net
  github-repo: noria
  dockerfile: cosmos
  build-target: make install
  build-env:
    - BUILD_TAGS=muslc
  binaries:
    - /go/bin/noriad

# Neutron
- name: neutron
  github-organization: neutron-org
  github-repo: neutron
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/neutrond
  build-env:
    - BUILD_TAGS=muslc

# Nibiru
- name: nibiru
  github-organization: NibiruChain
  github-repo: nibiru
  dockerfile: cargo
  build-target: make install
  binaries:
    - /root/go/bin/nibid

# Noble
- name: noble
  github-organization: noble-assets
  github-repo: noble
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/nobled

# Nolus
- name: nolus
  github-organization: Nolus-Protocol
  github-repo: nolus-core
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/nolusd
  build-env:
    - BUILD_TAGS=muslc

# Omniflixhub
- name: omniflixhub
  github-organization: OmniFlix
  github-repo: omniflixhub
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/omniflixhubd

# Onomy
- name: onomy
  github-organization: onomyprotocol
  github-repo: onomy
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/onomyd

# Onomy gbt: Not a chain, companion process required by validator
- name: onomy-gbt
  github-organization: onomyprotocol
  github-repo: arc
  dockerfile: cargo
  build-dir: orchestrator
  build-target: cargo build --release
  binaries:
    - /build/arc/orchestrator/target/${ARCH}-unknown-linux-gnu/release/gbt

# Osmosis
- name: osmosis
  github-organization: osmosis-labs
  github-repo: osmosis
  dockerfile: cosmos
  build-target: make build
  binaries:
    - build/osmosisd
  build-env:
    - BUILD_TAGS=muslc

# panacea
- name: panacea
  github-organization: medibloc
  github-repo: panacea-core
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/panacead
  build-env:
    - BUILD_TAGS=muslc

# Penumbra
- name: penumbra
  github-organization: penumbra-zone
  github-repo: penumbra
  dockerfile: cargo
  build-target: cargo build --release
  pre-build: |
    apt install -y git-lfs
    git lfs fetch
    git lfs checkout
  binaries:
    - /build/penumbra/target/${ARCH}-unknown-linux-gnu/release/pd
    - /build/penumbra/target/${ARCH}-unknown-linux-gnu/release/pcli
    - /build/penumbra/target/${ARCH}-unknown-linux-gnu/release/pclientd
  target-libraries:
    - /lib/${ARCH}-linux-gnu/libnss_dns.so.2
    - /lib/${ARCH}-linux-gnu/libresolv.so.2

# Persistence
- name: persistence
  github-organization: persistenceOne
  github-repo: persistenceCore
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/persistenceCore
  build-env:
    - BUILD_TAGS=muslc

# Polkadot
- name: polkadot
  github-organization: paritytech
  github-repo: polkadot
  dockerfile: cargo
  build-target: cargo build --release
  pre-build: |
    ./scripts/init.sh
  binaries:
    - /build/polkadot/target/${ARCH}-unknown-linux-gnu/release/polkadot

# Provenance
- name: provenance
  github-organization: provenance-io
  github-repo: provenance
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/provenanced
  build-env:
    - WITH_LEDGER=false
    - WITH_CLEVELDB=false
    - BUILD_TAGS=muslc musl dynamic

# Quasar
- name: quasar
  github-organization: quasar-finance
  github-repo: quasar
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/quasarnoded
  build-env:
    - BUILD_TAGS=muslc

# Quasar testnet
- name: quasartestnet
  pre-build: |
    apt update
    wget "https://github.com/quasar-finance/binary-release/blob/main/$VERSION/quasarnoded-linux-amd64?raw=true" -O quasarnoded
    mv quasarnoded /usr/bin
    chmod 555 /usr/bin/quasarnoded
  binaries:
    - /usr/bin/quasarnoded
  platforms:
    - linux/amd64

# Quicksilver
- name: quicksilver
  github-organization: ingenuity-build
  github-repo: quicksilver
  dockerfile: cosmos
  build-target: make build
  binaries:
    - build/quicksilverd
  build-env:
    - BUILD_TAGS=muslc

# Passage
- name: passage
  github-organization: envadiv
  github-repo: Passage3D
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/passage
  build-env:
    - BUILD_TAGS=muslc

# Regen
- name: regen
  github-organization: regen-network
  github-repo: regen-ledger
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/regen

# Rizon
- name: rizon
  github-organization: rizon-world
  github-repo: rizon
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/rizond

# saga
- name: saga
  github-organization: sagaxyz
  github-repo: ssc
  dockerfile: cosmos
  build-target: |
    make install
  binaries:
    - /go/bin/sscd
  build-env:
    - BUILD_TAGS=muslc

# Secret Network
- name: secretnetwork
  dockerfile: imported
  base-image: ghcr.io/scrtlabs/secret-network-node
  platforms:
    - linux/amd64

# Seda
- name: seda
  github-organization: sedaprotocol
  github-repo: seda-chain
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/sedad
  build-env:
    - BUILD_TAGS=muslc

# Sei
- name: sei
  github-organization: sei-protocol
  github-repo: sei-chain
  dockerfile: cosmos
  build-target: |
    make install
  binaries:
    - /go/bin/seid
  build-env:
    - BUILD_TAGS=muslc

# Sentinel
- name: sentinel
  github-organization: sentinel-official
  github-repo: hub
  dockerfile: cosmos
  # Sentinel Makefile does not consume LDFLAGS or BUILD_TAGS env vars.
  build-target: |
    BUILD_TAGS=netgo,muslc
    LD_FLAGS="-s -w -X github.com/cosmos/cosmos-sdk/version.Name=sentinel -X github.com/cosmos/cosmos-sdk/version.AppName=sentinelhub -X github.com/cosmos/cosmos-sdk/version.Version=$(echo $(git describe --tags) | sed 's/^v//') -X github.com/cosmos/cosmos-sdk/version.Commit=$(git log -1 --format='%H') -X github.com/cosmos/cosmos-sdk/version.BuildTags=\"${BUILD_TAGS}\" -X github.com/tendermint/tendermint/version.TMCoreSemVer=$(go list -m github.com/tendermint/tendermint | sed 's:.* ::')"
    go install -mod=readonly -tags="${BUILD_TAGS}" -ldflags="$LDFLAGS ${LD_FLAGS}" ./cmd/sentinelhub
  binaries:
    - /go/bin/sentinelhub

# Shentu
- name: shentu
  github-organization: ShentuChain
  github-repo: shentu
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/certik

# Sifchain
- name: sifchain
  github-organization: Sifchain
  github-repo: sifnode
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/sifnoded

# Sim (for testing)
- name: sim
  github-organization: cosmos
  github-repo: cosmos-sdk
  dockerfile: cosmos
  build-target: make build
  binaries:
    - build/simd

# Sommelier
- name: sommelier
  github-organization: peggyjv
  github-repo: sommelier
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/sommelier

# Stargaze
- name: stargaze
  github-organization: public-awesome
  github-repo: stargaze
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/starsd
  build-env:
    - BUILD_TAGS=muslc

# Starname
- name: starname
  github-organization: iov-one
  github-repo: starnamed
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/starnamed
  build-env:
    - BUILD_TAGS=muslc

# Stride
- name: stride
  github-organization: Stride-Labs
  github-repo: stride
  dockerfile: cosmos
  build-target: make build
  binaries:
    - build/strided

# Tendermint
- name: tendermint
  github-organization: tendermint
  github-repo: tendermint
  dockerfile: cosmos
  build-target: make build
  binaries:
    - /go/src/github.com/tendermint/tendermint/build/tendermint

# Terp Network
- name: terpnetwork
  github-organization: terpnetwork
  github-repo: terp-core
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/terpd
  build-env:
    - BUILD_TAGS=muslc

# Terra
- name: terra
  github-organization: terra-money
  github-repo: core
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/terrad
  build-env:
    - BUILD_TAGS=muslc

# Terra Classic
- name: terra-classic
  github-organization: classic-terra
  github-repo: core
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/terrad
  build-env:
    - BUILD_TAGS=muslc

# Thorchain
- name: thorchain
  repo-host: gitlab.com
  github-organization: thorchain
  github-repo: thornode
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/thornode
  pre-build: |
    apk --no-cache add findutils protoc && \
    rm -rf /var/cache/apk/*

# Umee
- name: umee
  github-organization: umee-network
  github-repo: umee
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/umeed
  build-env:
    - BUILD_TAGS=muslc

# Union
- name: union
  dockerfile: imported
  base-image: ghcr.io/unionlabs/uniond-release
  binaries:
    - /nix/store/*-uniond-${ARCH}-unknown-linux-musl/bin/uniond

# Vidulum
- name: vidulum
  github-organization: vidulum
  github-repo: mainnet
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/vidulumd

# Wasm
- name: wasm
  github-organization: CosmWasm
  github-repo: wasmd
  dockerfile: cosmos
  build-target: make build
  binaries:
    - build/wasmd
  build-env:
    - BUILD_TAGS=muslc

# Wormchain (Wormhole Gateway)
- name: wormchain
  github-organization: wormhole-foundation
  github-repo: wormhole
  dockerfile: cosmos
  build-target: |
    BUILD_TAGS=netgo,muslc
    LD_FLAGS="-s -w -X github.com/cosmos/cosmos-sdk/version.Name=wormchain -X github.com/cosmos/cosmos-sdk/version.Version=$(echo $(git describe --tags) | sed 's/^v//') -X github.com/cosmos/cosmos-sdk/version.Commit=$(git log -1 --format='%H') -X github.com/cosmos/cosmos-sdk/version.BuildTags=\"${BUILD_TAGS}\" -X github.com/cosmos/cosmos-sdk/version.ServerName=wormchaind"
    go build -mod=readonly -tags="${BUILD_TAGS}" -ldflags="$LDFLAGS ${LD_FLAGS}" -o build/wormchaind cmd/wormchaind/main.go
  build-dir: wormchain
  binaries:
    - wormchain/build/wormchaind

# Xion
- name: xion
  github-organization: burnt-labs
  github-repo: xion
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/xiond
  build-env:
    - BUILD_TAGS=muslc

# Xpla
- name: xpla
  github-organization: xpladev
  github-repo: xpla
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/xplad
  build-env:
    - BUILD_TAGS=muslc