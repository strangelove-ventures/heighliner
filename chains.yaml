# Acrechain
- name: acrechain
  github-organization: ArableProtocol
  github-repo: acrechain
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/acred
  build-env:
    - LEDGER_ENABLED=false

# Agoric-sdk
- name: agoric
  dockerfile: imported
  base-image: agoric/agoric-sdk

# Akash
- name: akash
  github-organization: ovrclk
  github-repo: akash
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/akash

# Assetmantle
- name: assetmantle
  github-organization: assetmantle
  github-repo: node
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/mantleNode
  build-env:
    - LEDGER_ENABLED=false

# Axelar
- name: axelar
  github-organization: axelarnetwork
  github-repo: axelar-core
  dockerfile: cosmos
  binaries:
    - bin/axelard
  build-target: |
    set -eux
    apk add --update nodejs npm jq py3-pip
    git clone -b v4.3.0 --single-branch https://github.com/axelarnetwork/axelar-cgp-solidity.git
    cd axelar-cgp-solidity
    npm ci
    npm run build
    npm run flatten
    mkdir -p ../contract-artifacts/gateway
    mv artifacts/* ../contract-artifacts/
    cd ..
    make generate
    VERSION=$(echo $(git describe --tags) | sed 's/^v//')
    COMMIT=$(git log -1 --format='%H')
    BUILD_TAGS=muslc
    LDFLAGS="$LDFLAGS -X github.com/cosmos/cosmos-sdk/version.Name=axelar \
      -X github.com/cosmos/cosmos-sdk/version.AppName=axelard \
      -X github.com/cosmos/cosmos-sdk/version.Version=$VERSION \
      -X "github.com/cosmos/cosmos-sdk/version.BuildTags=$BUILD_TAGS" \
      -X github.com/cosmos/cosmos-sdk/version.Commit=$COMMIT"
    go build -o ./bin/axelard -mod=readonly -tags "$BUILD_TAGS" -ldflags "$LDFLAGS" ./cmd/axelard
  platforms:
    - linux/amd64

# Axelar tofnd
- name: tofnd
  github-organization: axelarnetwork
  github-repo: tofnd
  dockerfile: cargo
  build-target: build --release
  pre-build:
    apt install -y libgmp3-dev:${TARGETARCH}
  binaries:
    - /build/tofnd/target/${ARCH}-unknown-linux-gnu/release/tofnd

# Basilisk
- name: basilisk
  github-organization: galacticcouncil
  github-repo: Basilisk-node
  dockerfile: cargo
  build-target: build --release -Zbuild-std
  pre-build: |
    apt install -y zlib1g-dev:${TARGETARCH}
    TOOLCHAIN=$(cat rust-toolchain | grep channel | awk '{print $3}' | tr -d '"')
    rustup component add rust-src --toolchain ${TOOLCHAIN}-$(uname -m)-unknown-linux-gnu
    ./scripts/init.sh
  binaries:
    - /build/Basilisk-node/target/${ARCH}-unknown-linux-gnu/release/basilisk

# Bitcanna
- name: bitcanna
  github-organization: BitCannaGlobal
  github-repo: bcna
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/bcnad

# BitSong
- name: bitsong
  github-organization: bitsongofficial
  github-repo: go-bitsong
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/bitsongd

# Bostrom
- name: bostrom
  github-organization: cybercongress
  github-repo: go-cyber
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/cyber
  build-env:
    - BUILD_TAGS=muslc
    
# Burnt
- name: burnt
  github-organization: burnt-labs
  github-repo: burnt
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/burntd
  build-env:
    - BUILD_TAGS=muslc

# Carbon
- name: carbon
  github-organization: Switcheo
  github-repo: carbon-bootstrap
  dockerfile: cargo
  pre-build: |
    apt update && apt install wget build-essential jq cmake sudo -y
    wget https://github.com/google/leveldb/archive/1.23.tar.gz && \
      tar -zxvf 1.23.tar.gz && \
      wget https://github.com/google/googletest/archive/release-1.11.0.tar.gz && \
      tar -zxvf release-1.11.0.tar.gz && \
      mv googletest-release-1.11.0/* leveldb-1.23/third_party/googletest && \
      wget https://github.com/google/benchmark/archive/v1.5.5.tar.gz && \
      tar -zxvf v1.5.5.tar.gz && \
      mv benchmark-1.5.5/* leveldb-1.23/third_party/benchmark && \
      cd leveldb-1.23 && \
      mkdir -p build && \
      cd build && \
      cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON .. && \
      cmake --build . && \
      sudo cp -P libleveldb.so* /usr/local/lib/ && \
      sudo ldconfig && \
      cd .. && \
      sudo cp -r include/leveldb /usr/local/include/ && \
      cd .. && \
    NETWORK=mainnet
    VERSION_NUM=$(echo ${VERSION} | cut -c 2-)
    wget https://github.com/Switcheo/carbon-bootstrap/releases/download/"${VERSION}"/carbond"${VERSION_NUM}"-${NETWORK}.linux-$(dpkg --print-architecture).tar.gz
    tar -xvf carbond${VERSION_NUM}-${NETWORK}.linux-$(dpkg --print-architecture).tar.gz
    sudo mv carbond /usr/local/bin
  libraries:
    - /usr/local/lib/libleveldb.so.*
  binaries:
    - /usr/local/bin/carbond

# Cerberus
- name: cerberus
  github-organization: cerberus-zone
  github-repo: cerberus
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/cerberusd

# Cheqd
- name: cheqd
  github-organization: cheqd
  github-repo: cheqd-node
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/cheqd-noded

# Chihuahua
- name: chihuahua
  github-organization: ChihuahuaChain
  github-repo: chihuahua
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/chihuahuad

# Comdex
- name: comdex
  github-organization: comdex-official
  github-repo: comdex
  dockerfile: cosmos
  build-target: make install
  build-env:
    - BUILD_TAGS=muslc
  binaries:
    - /go/bin/comdex

# Composable
- name: composable
  github-organization: ComposableFi
  github-repo: composable
  dockerfile: cargo
  pre-build: |
    apt install -y zlib1g-dev:${TARGETARCH}
    TOOLCHAIN=$(cat rust-toolchain.toml | grep channel | awk '{print $3}' | tr -d '"')
    rustup component add rust-src --toolchain ${TOOLCHAIN}-$(uname -m)-unknown-linux-gnu
    rustup target add wasm32-unknown-unknown
    cd code
    cargo build --release -p wasm-optimizer
    cargo build --release -p composable-runtime-wasm --target wasm32-unknown-unknown
    cargo build --release -p picasso-runtime-wasm --target wasm32-unknown-unknown
    cargo build --release -p dali-runtime-wasm --target wasm32-unknown-unknown
    ./target/release/wasm-optimizer --input ./target/wasm32-unknown-unknown/release/dali_runtime.wasm --output ./target/wasm32-unknown-unknown/release/dali_runtime.optimized.wasm
    ./target/release/wasm-optimizer --input ./target/wasm32-unknown-unknown/release/picasso_runtime.wasm --output ./target/wasm32-unknown-unknown/release/picasso_runtime.optimized.wasm
    ./target/release/wasm-optimizer --input ./target/wasm32-unknown-unknown/release/composable_runtime.wasm --output ./target/wasm32-unknown-unknown/release/composable_runtime.optimized.wasm
  build-dir: code
  build-env:
    - DALI_RUNTIME=/build/composable/code/target/wasm32-unknown-unknown/release/dali_runtime.optimized.wasm
    - PICASSO_RUNTIME=/build/composable/code/target/wasm32-unknown-unknown/release/picasso_runtime.optimized.wasm
    - COMPOSABLE_RUNTIME=/build/composable/code/target/wasm32-unknown-unknown/release/composable_runtime.optimized.wasm
  build-target: build --release -p composable -Zbuild-std --features=builtin-wasm
  binaries:
    - /build/composable/code/target/${ARCH}-unknown-linux-gnu/release/composable

# Cosmos Hub
- name: gaia
  github-organization: cosmos
  github-repo: gaia
  dockerfile: cosmos
  build-target: make install
  build-env:
    - LEDGER_ENABLED=false
    - BUILD_TAGS=muslc
  binaries:
    - /go/bin/gaiad

# Cosmos Hub ICS
- name: ics
  github-organization: cosmos
  github-repo: interchain-security
  dockerfile: cosmos
  build-target: |
    export GOFLAGS='-buildmode=pie'
    export CGO_CPPFLAGS="-D_FORTIFY_SOURCE=2"
    export CGO_LDFLAGS="-Wl,-z,relro,-z,now -fstack-protector"
    go install -ldflags="$LDFLAGS" ./cmd/interchain-security-pd
    go install -ldflags="$LDFLAGS" ./cmd/interchain-security-cd
  binaries:
    - /go/bin/interchain-security-pd
    - /go/bin/interchain-security-cd

# Crescent
- name: crescent
  github-organization: crescent-network
  github-repo: crescent
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/crescentd

# Cronos
- name: cronos
  github-organization: crypto-org-chain
  github-repo: cronos
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/cronosd

# Crypto.org
- name: cryptoorgchain
  github-organization: crypto-org-chain
  github-repo: chain-main
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/chain-maind

# Decentr
- name: decentr
  github-organization: Decentr-net
  github-repo: decentr
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/decentrd

# Desmos
- name: desmos
  github-organization: desmos-labs
  github-repo: desmos
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/desmos
  build-env:
    - BUILD_TAGS=muslc

# Dig
- name: dig
  github-organization: notional-labs
  github-repo: dig
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/digd
  build-env:
    - BUILD_TAGS=muslc

# Duality
- name: duality
  github-organization: duality-labs
  github-repo: duality
  dockerfile: cosmos
  build-target: make install
  build-env:
    - LEDGER_ENABLED=false
    - BUILD_TAGS=muslc
  binaries:
    - /go/bin/dualityd

# Emoney
- name: emoney
  github-organization: e-money
  github-repo: em-ledger
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/emd

# Evmos
- name: evmos
  github-organization: tharsis
  github-repo: evmos
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/evmosd

# Fetchhub
- name: fetchhub
  github-organization: fetchai
  github-repo: fetchd
  dockerfile: cosmos
  build-target: make install
  build-env:
    - BUILD_TAGS=muslc
  binaries:
    - /go/bin/fetchd

# FirmaChain
- name: firmachain
  github-organization: FirmaChain
  github-repo: firmachain
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/firmachaind

# Gravity Bridge
- name: gravitybridge
  github-organization: Gravity-Bridge
  github-repo: Gravity-Bridge
  dockerfile: cosmos
  build-target: make build
  build-dir: module
  binaries:
    - module/build/gravity

# ibc-go sim (for testing)
- name: ibc-go-simd
  github-organization: cosmos
  github-repo: ibc-go
  dockerfile: cosmos
  build-target: make build
  binaries:
    - build/simd
  build-env:
    - BUILD_TAGS=muslc

# ImpactHub
- name: impacthub
  github-organization: ixofoundation
  github-repo: ixo-blockchain
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/ixod

# Injective
- name: injective
  pre-build: |
    apt update
    apt install unzip
    wget https://github.com/InjectiveLabs/injective-chain-releases/releases/download/$VERSION/linux-amd64.zip
    unzip linux-amd64.zip
    mv injectived peggo injective-exchange /usr/bin
    mv libwasmvm.x86_64.so /usr/lib
  binaries:
    - /usr/bin/injectived
    - /usr/bin/peggo
    - /usr/bin/injective-exchange
  libraries:
    - /usr/lib/libwasmvm.x86_64.so
  platforms:
    - linux/amd64

# Interchain accounts demo
- name: icad
  github-organization: cosmos
  github-repo: interchain-accounts-demo
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/icad

# Interchain queries demo
- name: icqd
  github-organization: quasar-finance
  github-repo: interchain-query-demo
  dockerfile: cosmos
  build-target: go build -ldflags "$LDFLAGS" -o build/icq ./cmd/interchain-query-demod
  binaries:
    - build/icq

# IRISnet
- name: irisnet
  github-organization: irisnet
  github-repo: irishub
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/iris

# Juno
- name: juno
  github-organization: CosmosContracts
  github-repo: juno
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/junod
  build-env:
    - LEDGER_ENABLED=false
    - BUILD_TAGS=muslc

# Kichain
- name: kichain
  github-organization: KiFoundation
  github-repo: ki-tools
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/kid
  build-env:
    - BUILD_TAGS=muslc

# Konstellation
- name: konstellation
  github-organization: knstl
  github-repo: konstellation
  dockerfile: cosmos
  build-target: make install
  build-env:
    - BUILD_TAGS=muslc
  binaries:
    - /go/bin/knstld

# Kujira
- name: kujira
  github-organization: Team-Kujira
  github-repo: core
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/kujirad
  build-env:
    - LEDGER_ENABLED=false
    - BUILD_TAGS=muslc

# Likecoin
- name: likecoin
  github-organization: likecoin
  github-repo: likecoin-chain
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/liked

# Lumnetwork
- name: lumnetwork
  github-organization: lum-network
  github-repo: chain
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/lumd

# Nomic
- name: nomic
  github-organization: nomic-io
  github-repo: nomic
  dockerfile: cargo
  build-target: install --locked --path . -Zbuild-std
  pre-build: |
    TOOLCHAIN=$(cat rust-toolchain.toml | grep channel | awk '{print $3}' | tr -d '"')
    rustup component add rust-src --toolchain ${TOOLCHAIN}-$(uname -m)-unknown-linux-gnu
  binaries:
    - /build/nomic/target/${ARCH}-unknown-linux-gnu/release/nomic
  # TODO remove platforms here so that both linux/amd64 and linux/arm64 are built
  # once these changes are merged: https://github.com/nomic-io/orga/pull/154
  platforms:
    - linux/amd64

# Neutron
- name: neutron
  github-organization: neutron-org
  github-repo: neutron
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/neutrond
  build-env:
    - BUILD_TAGS=muslc

# Nibiru
- name: nibiru
  github-organization: NibiruChain
  github-repo: nibiru
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/nibid
  build-env:
    - BUILD_TAGS=muslc

# Noble
- name: noble
  github-organization: strangelove-ventures
  github-repo: noble
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/nobled

# Omniflixhub
- name: omniflixhub
  github-organization: OmniFlix
  github-repo: omniflixhub
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/omniflixhubd

# Onomy
- name: onomy
  github-organization: onomyprotocol
  github-repo: onomy
  dockerfile: cosmos
  # TODO: Heighliner will not produce working builds until https://github.com/onomyprotocol/onomy/pull/129 merged.
  # If PR not merged for your git-ref, then update and push to our fork, https://github.com/strangelove-ventures/onomy, with Onomy upstream.
  # And manually run heighliner command with `-o strangelove-ventures --git-ref main --tag <semver>`.
  build-target: make install
  binaries:
    - /go/bin/onomyd

# Onomy gbt: Not a chain, companion process required by validator
- name: onomy-gbt
  github-organization: onomyprotocol
  github-repo: arc
  dockerfile: cargo
  build-dir: orchestrator
  build-target: build --release
  binaries:
    - /build/arc/orchestrator/target/${ARCH}-unknown-linux-gnu/release/gbt

# Osmosis
- name: osmosis
  github-organization: osmosis-labs
  github-repo: osmosis
  dockerfile: cosmos
  build-target: make build
  binaries:
    - build/osmosisd
  build-env:
    - BUILD_TAGS=muslc

# panacea
- name: panacea
  github-organization: medibloc
  github-repo: panacea-core
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/panacead
  build-env:
    - BUILD_TAGS=muslc

# Penumbra
- name: penumbra
  github-organization: penumbra-zone
  github-repo: penumbra
  dockerfile: cargo
  build-target: build --release
  binaries:
    - /build/penumbra/target/${ARCH}-unknown-linux-gnu/release/pd
    - /build/penumbra/target/${ARCH}-unknown-linux-gnu/release/pcli

# Persistence
- name: persistence
  github-organization: persistenceOne
  github-repo: persistenceCore
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/persistenceCore

# Polkadot
- name: polkadot
  github-organization: paritytech
  github-repo: polkadot
  dockerfile: cargo
  build-target: build --release
  pre-build: |
    ./scripts/init.sh
  binaries:
    - /build/polkadot/target/${ARCH}-unknown-linux-gnu/release/polkadot

# Provenance
- name: provenance
  github-organization: provenance-io
  github-repo: provenance
  dockerfile: cosmos
  build-target: make install
  pre-build: |
    apk add --no-cache g++
    git clone https://github.com/edenhill/librdkafka.git
    cd librdkafka
    git checkout v1.8.2
    ./configure
    make
    make install
  binaries:
    - /go/bin/provenanced
  build-env:
    - WITH_LEDGER=false
    - WITH_CLEVELDB=false
    - BUILD_TAGS=muslc musl dynamic

# Quicksilver
- name: quicksilver
  github-organization: ingenuity-build
  github-repo: quicksilver
  dockerfile: cosmos
  build-target: make build
  binaries:
    - build/quicksilverd

# Regen
- name: regen
  github-organization: regen-network
  github-repo: regen-ledger
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/regen

# Rizon
- name: rizon
  github-organization: rizon-world
  github-repo: rizon
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/rizond

# Secret Network
- name: secretnetwork
  dockerfile: imported
  base-image: ghcr.io/scrtlabs/secret-network-node
  platforms:
    - linux/amd64

# Sentinel
- name: sentinel
  github-organization: sentinel-official
  github-repo: hub
  dockerfile: cosmos
  # Sentinel Makefile does not consume LDFLAGS or BUILD_TAGS env vars.
  build-target: |
    BUILD_TAGS=netgo,muslc
    LD_FLAGS="-s -w -X github.com/cosmos/cosmos-sdk/version.Name=sentinel -X github.com/cosmos/cosmos-sdk/version.AppName=sentinelhub -X github.com/cosmos/cosmos-sdk/version.Version=$(echo $(git describe --tags) | sed 's/^v//') -X github.com/cosmos/cosmos-sdk/version.Commit=$(git log -1 --format='%H') -X github.com/cosmos/cosmos-sdk/version.BuildTags=\"${BUILD_TAGS}\" -X github.com/tendermint/tendermint/version.TMCoreSemVer=$(go list -m github.com/tendermint/tendermint | sed 's:.* ::')"
    go install -mod=readonly -tags="${BUILD_TAGS}" -ldflags="$LDFLAGS ${LD_FLAGS}" ./cmd/sentinelhub
  binaries:
    - /go/bin/sentinelhub

# Shentu
- name: shentu
  github-organization: ShentuChain
  github-repo: shentu
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/certik

# Sifchain
- name: sifchain
  github-organization: Sifchain
  github-repo: sifnode
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/sifnoded

# Sim (for testing)
- name: sim
  github-organization: cosmos
  github-repo: cosmos-sdk
  dockerfile: cosmos
  build-target: make build
  binaries:
    - build/simd

# Sommelier
- name: sommelier
  github-organization: peggyjv
  github-repo: sommelier
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/sommelier

# Stargaze
- name: stargaze
  github-organization: public-awesome
  github-repo: stargaze
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/starsd
  build-env:
    - BUILD_TAGS=muslc

# Starname
- name: starname
  github-organization: iov-one
  github-repo: starnamed
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/starnamed
  build-env:
    - BUILD_TAGS=muslc

# Stride
- name: stride
  github-organization: Stride-Labs
  github-repo: stride
  dockerfile: cosmos
  build-target: make build
  binaries:
    - build/strided

# Tendermint
- name: tendermint
  github-organization: tendermint
  github-repo: tendermint
  dockerfile: cosmos
  build-target: make build
  binaries:
    - /go/src/github.com/tendermint/tendermint/build/tendermint

# Terra
- name: terra
  github-organization: terra-money
  github-repo: core
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/terrad
  build-env:
    - BUILD_TAGS=muslc

# Thorchain
- name: thorchain
  repo-host: gitlab.com
  github-organization: thorchain
  github-repo: thornode
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/thornode
  pre-build: |
    apk --no-cache add findutils protoc && \
    rm -rf /var/cache/apk/*

# Umee
- name: umee
  github-organization: umee-network
  github-repo: umee
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/umeed

# Vidulum
- name: vidulum
  github-organization: vidulum
  github-repo: mainnet
  dockerfile: cosmos
  build-target: make install
  binaries:
    - /go/bin/vidulumd

# Wasm
- name: wasm
  github-organization: CosmWasm
  github-repo: wasmd
  dockerfile: cosmos
  build-target: make build
  binaries:
    - build/wasmd
  build-env:
    - BUILD_TAGS=muslc
